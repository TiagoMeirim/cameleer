<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC5" version="1.0.6-dev.66.d284ecaae" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.5.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.5.3" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.12.1" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="ocaml" proved="true">
<path name=".."/><path name="mjrty.ml"/>
<theory name="Mjrty" proved="true">
 <goal name="numof&#39;vc" expl="VC for numof" proved="true">
 <proof prover="1"><result status="valid" time="0.024493" steps="14"/></proof>
 </goal>
 <goal name="numof_bounds" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="numof_bounds.0" proved="true">
  <transf name="induction" proved="true" arg1="b" arg2="from" arg3="a">
   <goal name="numof_bounds.0.0" expl="base case" proved="true">
   <proof prover="1"><result status="valid" time="0.055552" steps="14"/></proof>
   </goal>
   <goal name="numof_bounds.0.1" expl="recursive case" proved="true">
   <proof prover="1"><result status="valid" time="0.031906" steps="104"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="numof_bounds.1" proved="true">
  <transf name="induction" proved="true" arg1="b" arg2="from" arg3="a">
   <goal name="numof_bounds.1.0" expl="base case" proved="true">
   <proof prover="1"><result status="valid" time="0.020806" steps="14"/></proof>
   </goal>
   <goal name="numof_bounds.1.1" expl="recursive case" proved="true">
   <proof prover="1"><result status="valid" time="0.038504" steps="101"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="numof_append" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="numof_append.0" proved="true">
  <transf name="induction" proved="true" arg1="c" arg2="from" arg3="a">
   <goal name="numof_append.0.0" expl="base case" proved="true">
   <proof prover="2"><result status="valid" time="0.029184" steps="73"/></proof>
   </goal>
   <goal name="numof_append.0.1" expl="recursive case" proved="true">
   <proof prover="2"><result status="valid" time="0.040936" steps="244"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="numof_left_no_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="numof_left_no_add.0" proved="true">
  <transf name="instantiate" proved="true" arg1="numof_append" arg2="p,a">
   <goal name="numof_left_no_add.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.037422" steps="159"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="numof_left_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="numof_left_add.0" proved="true">
  <transf name="instantiate" proved="true" arg1="numof_append" arg2="p,a">
   <goal name="numof_left_add.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.050099" steps="259"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Mjrty.mjrty&#39;vc" expl="VC for mjrty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mjrty&#39;vc.0" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.032915" steps="101378"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.039298" steps="107644"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.039243" steps="107735"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.039947" steps="108462"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.4" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.043023" steps="116418"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.5" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.067057" steps="189770"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.6" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.338058" steps="707949"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.7" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.314613" steps="41348"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.8" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.038695" steps="103794"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.9" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.039705" steps="132721"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.10" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.052497" steps="119889"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.105845" steps="266568"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.12" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.040595" steps="124139"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.13" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.047371" steps="134357"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.14" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.203684" steps="39708"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.15" expl="exceptional postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040189" steps="118616"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.16" expl="postcondition" proved="true">
  <transf name="remove" proved="true" arg1="zero,one,(-),(&gt;),(&lt;=),(&gt;=),abs,min,max,empty3,is_digit,(!),is_nil,length3,mem4,(==),subset1,is_empty,singleton1,disjoint,elements,is_none,(++&#39;),rev_append1,map1,([]&#39;),singleton2,cons,snoc,(++),fst,snd,(%),is_pre_order,([]),rev,append,rev_append,mem,empty,add,singleton,subset,of_list,pow,a&#39;unused,length&#39;result&#39;unused,(!)&#39;result&#39;unused3,( * )&#39;result&#39;unused1,(&gt;)&#39;result&#39;unused1,k&#39;unused2,(-)&#39;result&#39;unused,k&#39;unused1,get&#39;result&#39;unused,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Min_r,Max_l,Min_comm,Max_comm,Min_assoc,Max_assoc,Div_mod,Div_bound,Mod_bound,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,Power_0,Power_s,Power_s_alt,Power_1,Power_sum,Power_mult,Power_comm1,Power_non_neg,Power_pos,Power_monotonic,concat_assoc,concat_empty,length_empty,length_concat,lt_empty,lt_not_com,lt_ref,lt_trans,le_empty,le_ref,lt_le,lt_le_eq,le_trans,at_out_of_range,at_empty,at_length,concat_at,substring_out_of_range,substring_of_length_zero_or_less,substring_of_empty,substring_smaller,substring_smaller_x,substring_length,substring_at,substring_substring,concat_substring,prefixof_substring,prefixof_concat,prefixof_empty,prefixof_empty2,suffixof_substring,suffixof_concat,suffixof_empty,suffixof_empty2,contains_prefixof,contains_suffixof,contains_empty,contains_empty2,contains_substring,contains_concat,contains_at,indexof_empty,indexof_empty1,indexof_contains,contains_indexof,not_contains_indexof,substring_indexof,indexof_out_of_range,indexof_in_range,indexof_contains_substring,replace_empty,replace_not_contains,replace_empty2,replace_substring_indexof,replaceall_empty1,not_contains_replaceall,to_int_gt_minus_1,to_int_empty,from_int_negative,from_int_to_int,is_nil&#39;spec,Length_nonnegative,Length_nil,extensionality,subset_refl,subset_trans,is_empty_empty,empty_is_empty,add_def,mem_singleton,remove_def,add_remove,remove_add,subset_remove,union_def,subset_union_1,subset_union_2,inter_def,subset_inter_1,subset_inter_2,diff_def,subset_diff,pick_def,disjoint_inter_empty,disjoint_diff_eq,disjoint_diff_s2,filter_def,subset_filter,map_def,mem_map,cardinal_nonneg,cardinal_empty,cardinal_add,cardinal_remove,cardinal_subset,subset_eq,cardinal1,cardinal_union,cardinal_inter_disjoint,cardinal_diff,cardinal_filter,cardinal_map,elements_mem,is_none&#39;spec,Append_assoc,Append_l_nil,Append_length,mem_append1,mem_decomp,rev_append_append_l,length_nonnegative,(==)&#39;spec,(==)&#39;spec&#39;0,create&#39;spec,create&#39;spec&#39;0,empty&#39;def,set&#39;spec,set&#39;spec&#39;0,set&#39;spec&#39;1,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,singleton&#39;spec&#39;0,cons&#39;spec,cons&#39;spec&#39;0,cons&#39;spec&#39;1,snoc&#39;spec,snoc&#39;spec&#39;0,snoc&#39;spec&#39;1,([..])&#39;spec,([..])&#39;spec&#39;0,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,(++)&#39;spec&#39;0,(++)&#39;spec&#39;1,same_location_eq,(~=)&#39;spec,cmp_eq,compare_pre_order2,my_array&#39;invariant,to_list_range&#39;def,compare_pre_order1,compare_pre_order,numof&#39;def,numof_left_no_add,H14,H13,H8,H7,Ensures1,H6,H2">
   <goal name="mjrty&#39;vc.16.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.017087" steps="23791"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mjrty&#39;vc.17" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.036783" steps="119319"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.18" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.031153" steps="113160"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.449360" steps="68318"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.20" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.150026" steps="32199"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.21" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.031336" steps="125316"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.22" expl="exceptional postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.018786" steps="118055"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.23" expl="exceptional postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.028086" steps="9399"/></proof>
  </goal>
  <goal name="mjrty&#39;vc.24" expl="out of loop bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.030753" steps="102867"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>

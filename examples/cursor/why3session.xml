<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="1" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.3.3" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="ocaml" proved="true">
<path name=".."/><path name="cursor.ml"/>
<theory name="Cursor" proved="true">
 <goal name="CursorList.t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="VC for t" proved="true">
  <transf name="assert" proved="true" arg1="(seq_of_list (Nil: list a) = seq_of_list (Nil: list a) ++ seq_of_list (Nil: list a))">
   <goal name="t&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="2"><result status="valid" time="0.34" steps="990"/></proof>
   </goal>
   <goal name="t&#39;vc.0.1" expl="VC for t" proved="true">
   <proof prover="1"><result status="valid" time="0.09" steps="21189"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="CursorList.seq_of_list_append" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="seq_of_list_append.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="l1">
   <goal name="seq_of_list_append.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.16" steps="636"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="CursorList.seq_of_list_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="seq_of_list_length.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="l">
   <goal name="seq_of_list_length.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="seq_of_list_length.0.0.0" proved="true">
    <proof prover="1"><result status="valid" time="0.12" steps="27189"/></proof>
    </goal>
    <goal name="seq_of_list_length.0.0.1" proved="true">
    <proof prover="2"><result status="valid" time="0.03" steps="28"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="CursorList.seq_of_list_mem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="seq_of_list_mem.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="l">
   <goal name="seq_of_list_mem.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="seq_of_list_mem.0.0.0" proved="true">
    <proof prover="1"><result status="valid" time="0.12" steps="23720"/></proof>
    </goal>
    <goal name="seq_of_list_mem.0.0.1" proved="true">
    <transf name="case" proved="true" arg1="(x1 = x2)">
     <goal name="seq_of_list_mem.0.0.1.0" expl="true case" proved="true">
     <proof prover="2"><result status="valid" time="0.07" steps="69"/></proof>
     </goal>
     <goal name="seq_of_list_mem.0.0.1.1" expl="false case" proved="true">
     <proof prover="1" timelimit="5"><result status="valid" time="0.43" steps="44100"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="seq_of_list_mem.1" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="l">
   <goal name="seq_of_list_mem.1.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="seq_of_list_mem.1.0.0" proved="true">
    <proof prover="1"><result status="valid" time="0.15" steps="25226"/></proof>
    </goal>
    <goal name="seq_of_list_mem.1.0.1" proved="true">
    <proof prover="1"><result status="valid" time="0.24" steps="33219"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="CursorList.next&#39;vc" expl="VC for next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="next&#39;vc.0" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="next&#39;vc.1" expl="type invariant" proved="true">
  <transf name="assert" proved="true" arg1="(forall x: &#39;a, s1 s2: seq &#39;a. (s1 ++ (cons x s2)) == (snoc s1 x ++ s2))">
   <goal name="next&#39;vc.1.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.34" steps="60465"/></proof>
   </goal>
   <goal name="next&#39;vc.1.1" expl="type invariant" proved="true">
   <proof prover="1"><result status="valid" time="0.13" steps="30815"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="next&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="99"/></proof>
  </goal>
  <goal name="next&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="27131"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="CursorList.has_next&#39;vc" expl="VC for has_next" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="91"/></proof>
 </goal>
 <goal name="CursorList.create&#39;vc" expl="VC for create" proved="true">
 <proof prover="1"><result status="valid" time="0.18" steps="25063"/></proof>
 </goal>
 <goal name="sum_cursor&#39;vc" expl="VC for sum_cursor" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sum_cursor&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="24022"/></proof>
  </goal>
  <goal name="sum_cursor&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="29779"/></proof>
  </goal>
  <goal name="sum_cursor&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="26335"/></proof>
  </goal>
  <goal name="sum_cursor&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="26203"/></proof>
  </goal>
  <goal name="sum_cursor&#39;vc.4" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sum_cursor&#39;vc.4.0" expl="loop variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.15" steps="30564"/></proof>
   </goal>
   <goal name="sum_cursor&#39;vc.4.1" expl="loop variant decrease" proved="true">
   <proof prover="2"><result status="valid" time="0.02" steps="24"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sum_cursor&#39;vc.5" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="26281"/></proof>
  </goal>
  <goal name="sum_cursor&#39;vc.6" expl="loop invariant preservation" proved="true">
  <proof prover="1" timelimit="5"><result status="valid" time="2.36" steps="203158"/></proof>
  </goal>
  <goal name="sum_cursor&#39;vc.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sum_cursor&#39;vc.7.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.64" steps="83704"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Mem.mem_cursor&#39;vc" expl="VC for mem_cursor" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mem_cursor&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="24149"/></proof>
  </goal>
  <goal name="mem_cursor&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.13" steps="26731"/></proof>
  </goal>
  <goal name="mem_cursor&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="25710"/></proof>
  </goal>
  <goal name="mem_cursor&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="25578"/></proof>
  </goal>
  <goal name="mem_cursor&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mem_cursor&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.06" steps="143"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mem_cursor&#39;vc.5" expl="loop variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="54"/></proof>
  </goal>
  <goal name="mem_cursor&#39;vc.6" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="25644"/></proof>
  </goal>
  <goal name="mem_cursor&#39;vc.7" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="71"/></proof>
  </goal>
  <goal name="mem_cursor&#39;vc.8" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mem_cursor&#39;vc.8.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.08" steps="26144"/></proof>
   </goal>
   <goal name="mem_cursor&#39;vc.8.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.08" steps="386"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.3.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="ocaml">
<path name=".."/><path name="tezos.ml"/>
<theory name="Tezos">
 <goal name="sum_until_negative_0&#39;vc" expl="VC for sum_until_negative_0">
 <transf name="split_vc" >
  <goal name="sum_until_negative_0&#39;vc.0" expl="termination">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="4687883"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="722658"/></proof>
  </goal>
  <goal name="sum_until_negative_0&#39;vc.1" expl="index in array bounds">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="2488898"/></proof>
  <proof prover="2"><result status="unknown" time="0.09" steps="17582"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sum_until_negative_1&#39;vc" expl="VC for sum_until_negative_1">
 <transf name="split_vc" >
  <goal name="sum_until_negative_1&#39;vc.0" expl="loop invariant init">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00" steps="2067624"/></proof>
  <proof prover="2" obsolete="true"><result status="unknown" time="0.09" steps="15349"/></proof>
  <transf name="split_vc" >
   <goal name="sum_until_negative_1&#39;vc.0.0" expl="loop invariant init" proved="true">
   <proof prover="2"><result status="valid" time="0.04" steps="10957"/></proof>
   </goal>
   <goal name="sum_until_negative_1&#39;vc.0.1" expl="loop invariant init">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="2505455"/></proof>
   <proof prover="2"><result status="unknown" time="0.11" steps="17300"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sum_until_negative_1&#39;vc.1" expl="termination">
  <transf name="split_vc" >
   <goal name="sum_until_negative_1&#39;vc.1.0" expl="termination">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="2226627"/></proof>
   <proof prover="2"><result status="unknown" time="0.12" steps="16385"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sum_until_negative_1&#39;vc.2" expl="index in array bounds" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sum_until_negative_1&#39;vc.2.0" expl="index in array bounds" proved="true">
   <proof prover="2"><result status="valid" time="0.09" steps="11129"/></proof>
   </goal>
   <goal name="sum_until_negative_1&#39;vc.2.1" expl="index in array bounds" proved="true">
   <proof prover="2"><result status="valid" time="0.08" steps="11676"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sum_until_negative_1&#39;vc.3" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="11709"/></proof>
  </goal>
  <goal name="sum_until_negative_1&#39;vc.4" expl="loop invariant preservation">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="3173142"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="658540"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sum_until_negative_2&#39;vc" expl="VC for sum_until_negative_2">
 <transf name="split_vc" >
  <goal name="sum_until_negative_2&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="12608"/></proof>
  </goal>
  <goal name="sum_until_negative_2&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.13" steps="11440"/></proof>
  </goal>
  <goal name="sum_until_negative_2&#39;vc.2" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="12853"/></proof>
  </goal>
  <goal name="sum_until_negative_2&#39;vc.3" expl="loop variant decrease">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00" steps="3207194"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="661077"/></proof>
  </goal>
  <goal name="sum_until_negative_2&#39;vc.4" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="12888"/></proof>
  </goal>
  <goal name="sum_until_negative_2&#39;vc.5" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="11713"/></proof>
  </goal>
  <goal name="sum_until_negative_2&#39;vc.6" expl="loop variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="13104"/></proof>
  </goal>
  <goal name="sum_until_negative_2&#39;vc.7" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.12" steps="14142"/></proof>
  </goal>
  <goal name="sum_until_negative_2&#39;vc.8" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="11811"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="logic_sum_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="logic_sum_left.0" proved="true">
  <transf name="induction" proved="true" arg1="b" arg2="from" arg3="a">
   <goal name="logic_sum_left.0.0" expl="base case" proved="true">
   <proof prover="2"><result status="valid" time="0.05" steps="12542"/></proof>
   </goal>
   <goal name="logic_sum_left.0.1" expl="recursive case" proved="true">
   <proof prover="2"><result status="valid" time="0.08" steps="14965"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="logic_sum_ext" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="logic_sum_ext.0" proved="true">
  <transf name="induction" proved="true" arg1="b" arg2="from" arg3="a">
   <goal name="logic_sum_ext.0.0" expl="base case" proved="true">
   <proof prover="2"><result status="valid" time="0.15" steps="14147"/></proof>
   </goal>
   <goal name="logic_sum_ext.0.1" expl="recursive case" proved="true">
   <proof prover="2"><result status="valid" time="0.15" steps="16355"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="logic_sum_le" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="logic_sum_le.0" proved="true">
  <transf name="induction" proved="true" arg1="b" arg2="from" arg3="a">
   <goal name="logic_sum_le.0.0" expl="base case" proved="true">
   <proof prover="2"><result status="valid" time="0.10" steps="14485"/></proof>
   </goal>
   <goal name="logic_sum_le.0.1" expl="recursive case" proved="true">
   <proof prover="2"><result status="valid" time="0.15" steps="20503"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="logic_sum_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="logic_sum_zero.0" proved="true">
  <transf name="induction" proved="true" arg1="b" arg2="from" arg3="a">
   <goal name="logic_sum_zero.0.0" expl="base case" proved="true">
   <proof prover="2"><result status="valid" time="0.14" steps="14693"/></proof>
   </goal>
   <goal name="logic_sum_zero.0.1" expl="recursive case" proved="true">
   <proof prover="2"><result status="valid" time="0.17" steps="16401"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="logic_sum_nonneg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="logic_sum_nonneg.0" proved="true">
  <transf name="induction" proved="true" arg1="b" arg2="from" arg3="a">
   <goal name="logic_sum_nonneg.0.0" expl="base case" proved="true">
   <proof prover="2"><result status="valid" time="0.13" steps="14953"/></proof>
   </goal>
   <goal name="logic_sum_nonneg.0.1" expl="recursive case" proved="true">
   <proof prover="2"><result status="valid" time="0.17" steps="17323"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="logic_sum_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="logic_sum_decomp.0" proved="true">
  <transf name="induction" proved="true" arg1="b" arg2="from" arg3="a">
   <goal name="logic_sum_decomp.0.0" expl="base case" proved="true">
   <proof prover="2"><result status="valid" time="0.07" steps="16216"/></proof>
   </goal>
   <goal name="logic_sum_decomp.0.1" expl="recursive case" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="73411"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="shift_left&#39;vc" expl="VC for shift_left" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="21949"/></proof>
 </goal>
 <goal name="sum_until_negative_3&#39;vc" expl="VC for sum_until_negative_3" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sum_until_negative_3&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="15759"/></proof>
  </goal>
  <goal name="sum_until_negative_3&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="13999"/></proof>
  </goal>
  <goal name="sum_until_negative_3&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="16727"/></proof>
  </goal>
  <goal name="sum_until_negative_3&#39;vc.3" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="14344"/></proof>
  </goal>
  <goal name="sum_until_negative_3&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sum_until_negative_3&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(sum iter = logic_sum (fun (i2:int) -&gt; if a[i2] &lt; 0 then 0 else a[i2]) 0 (i iter) + logic_sum (fun (i2:int) -&gt; if a[i2] &lt; 0 then 0 else a[i2]) (i iter) (length a))">
    <goal name="sum_until_negative_3&#39;vc.4.0.0" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.19" steps="48564"/></proof>
    </goal>
    <goal name="sum_until_negative_3&#39;vc.4.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.27" steps="63124"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="sum_until_negative_3&#39;vc.5" expl="index in array bounds" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00" steps="3874153"/></proof>
  <proof prover="2"><result status="valid" time="0.04" steps="14375"/></proof>
  </goal>
  <goal name="sum_until_negative_3&#39;vc.6" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sum_until_negative_3&#39;vc.6.0" expl="loop variant decrease" proved="true">
   <proof prover="2"><result status="valid" time="0.11" steps="14452"/></proof>
   </goal>
   <goal name="sum_until_negative_3&#39;vc.6.1" expl="loop variant decrease" proved="true">
   <proof prover="2"><result status="valid" time="0.05" steps="15218"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sum_until_negative_3&#39;vc.7" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="15251"/></proof>
  </goal>
  <goal name="sum_until_negative_3&#39;vc.8" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="16788"/></proof>
  </goal>
  <goal name="sum_until_negative_3&#39;vc.9" expl="loop invariant preservation" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00" steps="3930894"/></proof>
  <proof prover="2"><result status="valid" time="0.06" steps="21034"/></proof>
  </goal>
  <goal name="sum_until_negative_3&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="17964"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="main&#39;vc" expl="VC for main" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="main&#39;vc.0" expl="array creation size" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="13626"/></proof>
  </goal>
  <goal name="main&#39;vc.1" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="negative_array">
   <goal name="main&#39;vc.1.0" expl="VC for main" proved="true">
   <transf name="right" proved="true" >
    <goal name="main&#39;vc.1.0.0" expl="right case" proved="true">
    <transf name="exists" proved="true" arg1="4">
     <goal name="main&#39;vc.1.0.0.0" proved="true">
     <proof prover="2"><result status="valid" time="0.09" steps="20047"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="main&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.48" steps="82860"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>

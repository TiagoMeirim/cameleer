<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="2" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Alt-Ergo" version="2.3.2" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="ocaml" proved="true">
<path name=".."/><path name="program_proofs.ml"/>
<theory name="Program_proofs" proved="true">
 <goal name="Mult.mult&#39;vc" expl="VC for mult" proved="true">
 <proof prover="2"><result status="valid" time="0.04" steps="11882"/></proof>
 </goal>
 <goal name="Mult.mult_commutative&#39;vc" expl="VC for mult_commutative" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mult_commutative&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="11132"/></proof>
  </goal>
  <goal name="mult_commutative&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="11081"/></proof>
  </goal>
  <goal name="mult_commutative&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="11671"/></proof>
  </goal>
  <goal name="mult_commutative&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="11150"/></proof>
  </goal>
  <goal name="mult_commutative&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="11113"/></proof>
  </goal>
  <goal name="mult_commutative&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="11116"/></proof>
  </goal>
  <goal name="mult_commutative&#39;vc.6" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="11168"/></proof>
  </goal>
  <goal name="mult_commutative&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="11117"/></proof>
  </goal>
  <goal name="mult_commutative&#39;vc.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="11714"/></proof>
  </goal>
  <goal name="mult_commutative&#39;vc.9" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="11212"/></proof>
  </goal>
  <goal name="mult_commutative&#39;vc.10" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="11759"/></proof>
  </goal>
  <goal name="mult_commutative&#39;vc.11" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="11790"/></proof>
  </goal>
  <goal name="mult_commutative&#39;vc.12" expl="variant decrease" proved="true">
  <transf name="left" proved="true" >
   <goal name="mult_commutative&#39;vc.12.0" expl="left case" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mult_commutative&#39;vc.12.0.0" expl="left case" proved="true">
    <proof prover="2"><result status="valid" time="0.04" steps="11181"/></proof>
    </goal>
    <goal name="mult_commutative&#39;vc.12.0.1" expl="left case" proved="true">
    <proof prover="2"><result status="valid" time="0.03" steps="11190"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="mult_commutative&#39;vc.13" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="11805"/></proof>
  </goal>
  <goal name="mult_commutative&#39;vc.14" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="11192"/></proof>
  </goal>
  <goal name="mult_commutative&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="12932"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Mirror.mirror_involutive&#39;vc" expl="VC for mirror_involutive" proved="true">
 <proof prover="2"><result status="valid" time="0.09" steps="17707"/></proof>
 </goal>
 <goal name="Mirror.mirror_size&#39;vc" expl="VC for mirror_size" proved="true">
 <proof prover="2"><result status="valid" time="0.11" steps="30357"/></proof>
 </goal>
 <goal name="AST.eval&#39;vc" expl="VC for eval" proved="true">
 <proof prover="2"><result status="valid" time="0.07" steps="15643"/></proof>
 </goal>
 <goal name="AST.eval_list&#39;vc" expl="VC for eval_list" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="eval_list&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="17597"/></proof>
  </goal>
  <goal name="eval_list&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="17597"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="AST.shorten&#39;vc" expl="VC for shorten" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="shorten&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="16569"/></proof>
  </goal>
  <goal name="shorten&#39;vc.1" expl="postcondition" proved="true">
  <transf name="destruct_term" proved="true" arg1="r">
   <goal name="shorten&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="destruct_term" proved="true" arg1="op">
    <goal name="shorten&#39;vc.1.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.02" steps="71"/></proof>
    </goal>
    <goal name="shorten&#39;vc.1.0.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.02" steps="69"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="shorten&#39;vc.1.1" expl="postcondition" proved="true">
   <transf name="destruct_term" proved="true" arg1="op">
    <goal name="shorten&#39;vc.1.1.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.02" steps="70"/></proof>
    </goal>
    <goal name="shorten&#39;vc.1.1.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.02" steps="68"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="shorten&#39;vc.1.2" expl="postcondition" proved="true">
   <transf name="destruct_term" proved="true" arg1="op">
    <goal name="shorten&#39;vc.1.2.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.01" steps="68"/></proof>
    </goal>
    <goal name="shorten&#39;vc.1.2.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.01" steps="66"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shorten&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="14540"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="AST.optimize&#39;vc" expl="VC for optimize" proved="true">
 <proof prover="2"><result status="valid" time="0.08" steps="20589"/></proof>
 </goal>
 <goal name="AST.optimize_and_filter&#39;vc" expl="VC for optimize_and_filter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="optimize_and_filter&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="19350"/></proof>
  </goal>
  <goal name="optimize_and_filter&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="19401"/></proof>
  </goal>
  <goal name="optimize_and_filter&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="optimize_and_filter&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.04" steps="14951"/></proof>
   </goal>
   <goal name="optimize_and_filter&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="optimize_and_filter&#39;vc.2.1.0" expl="postcondition" proved="true">
    <transf name="destruct_term" proved="true" arg1="op">
     <goal name="optimize_and_filter&#39;vc.2.1.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.02" steps="109"/></proof>
     </goal>
     <goal name="optimize_and_filter&#39;vc.2.1.0.1" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.07" steps="20487"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="optimize_and_filter&#39;vc.2.1.1" expl="postcondition" proved="true">
    <transf name="destruct_term" proved="true" arg1="op">
     <goal name="optimize_and_filter&#39;vc.2.1.1.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.03" steps="125"/></proof>
     </goal>
     <goal name="optimize_and_filter&#39;vc.2.1.1.1" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.08" steps="22929"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="optimize_and_filter&#39;vc.2.1.2" expl="postcondition" proved="true">
    <transf name="destruct_term" proved="true" arg1="op">
     <goal name="optimize_and_filter&#39;vc.2.1.2.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.03" steps="128"/></proof>
     </goal>
     <goal name="optimize_and_filter&#39;vc.2.1.2.1" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.09" steps="22855"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="PeanoNumbers.to_int&#39;vc" expl="VC for to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="to_int&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="to_int&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="to_int&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.06" steps="16331"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="to_int&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="to_int&#39;vc.0.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.05" steps="17314"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="to_int&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.09" steps="18354"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="PeanoNumbers.of_int&#39;vc" expl="VC for of_int" proved="true">
 <proof prover="2"><result status="valid" time="0.12" steps="18746"/></proof>
 <proof prover="3" timelimit="5"><result status="valid" time="0.02" steps="34"/></proof>
 </goal>
 <goal name="PeanoNumbers.to_int_of_int&#39;vc" expl="VC for to_int_of_int" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="19411"/></proof>
 <proof prover="3"><result status="valid" time="0.02" steps="37"/></proof>
 </goal>
 <goal name="PeanoNumbers.of_int_to_int&#39;vc" expl="VC for of_int_to_int" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="21556"/></proof>
 </goal>
 <goal name="PeanoNumbers.less_transitive&#39;vc" expl="VC for less_transitive" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="24473"/></proof>
 </goal>
 <goal name="PeanoNumbers.add&#39;vc" expl="VC for add" proved="true">
 <proof prover="2"><result status="valid" time="0.08" steps="20667"/></proof>
 </goal>
</theory>
</file>
</why3session>

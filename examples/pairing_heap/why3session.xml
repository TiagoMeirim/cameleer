<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.3.3" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="ocaml" proved="true">
<path name=".."/><path name="pairing_heap.ml"/>
<theory name="Pairing_heap" proved="true">
 <goal name="Make.le_roots_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="le_roots_trans.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="l">
   <goal name="le_roots_trans.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="le_roots_trans.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="0.06" steps="20973"/></proof>
    </goal>
    <goal name="le_roots_trans.0.0.1" proved="true">
    <proof prover="2"><result status="valid" time="0.01" steps="48"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.occ_nonneg&#39;vc" expl="VC for occ_nonneg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="occ_nonneg&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="20968"/></proof>
  </goal>
  <goal name="occ_nonneg&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="15"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.occ_list_nonneg&#39;vc" expl="VC for occ_list_nonneg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="occ_list_nonneg&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="23998"/></proof>
  </goal>
  <goal name="occ_list_nonneg&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="24037"/></proof>
  </goal>
  <goal name="occ_list_nonneg&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="occ_list_nonneg&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="2" timelimit="5"><result status="valid" time="0.02" steps="6"/></proof>
   </goal>
   <goal name="occ_list_nonneg&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="2" timelimit="5"><result status="valid" time="0.01" steps="16"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.size_nonneg&#39;vc" expl="VC for size_nonneg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="size_nonneg&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="22519"/></proof>
  </goal>
  <goal name="size_nonneg&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="634"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.size_tree_nonneg&#39;vc" expl="VC for size_tree_nonneg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="size_tree_nonneg&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="22509"/></proof>
  </goal>
  <goal name="size_tree_nonneg&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.09" steps="350"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.size_tree_list_nonneg&#39;vc" expl="VC for size_tree_list_nonneg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="size_tree_list_nonneg&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="25390"/></proof>
  </goal>
  <goal name="size_tree_list_nonneg&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="25464"/></proof>
  </goal>
  <goal name="size_tree_list_nonneg&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="785"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.size_empty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="size_empty.0" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="575"/></proof>
  </goal>
  <goal name="size_empty.1" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="21348"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.le_root_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="le_root_trans.0" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="53"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.occ_t_nonneg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="occ_t_nonneg.0" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="46"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.heap_mem_le&#39;vc" expl="VC for heap_mem_le" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="heap_mem_le&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="23453"/></proof>
  </goal>
  <goal name="heap_mem_le&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="22104"/></proof>
  </goal>
  <goal name="heap_mem_le&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="179"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.tree_mem_le&#39;vc" expl="VC for tree_mem_le" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="tree_mem_le&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="23425"/></proof>
  </goal>
  <goal name="tree_mem_le&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="22192"/></proof>
  </goal>
  <goal name="tree_mem_le&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="107"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.tree_list_mem_le&#39;vc" expl="VC for tree_list_mem_le" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="tree_list_mem_le&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="26270"/></proof>
  </goal>
  <goal name="tree_list_mem_le&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="24060"/></proof>
  </goal>
  <goal name="tree_list_mem_le&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="25713"/></proof>
  </goal>
  <goal name="tree_list_mem_le&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="23539"/></proof>
  </goal>
  <goal name="tree_list_mem_le&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="tree_list_mem_le&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="25209"/></proof>
   </goal>
   <goal name="tree_list_mem_le&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="26701"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.root_is_minimum&#39;vc" expl="VC for root_is_minimum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="root_is_minimum&#39;vc.0" expl="unreachable point" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="21678"/></proof>
  </goal>
  <goal name="root_is_minimum&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="183"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.is_empty&#39;vc" expl="VC for is_empty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="is_empty&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="23007"/></proof>
  </goal>
  <goal name="is_empty&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="23028"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.find_min_exn&#39;vc" expl="VC for find_min_exn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="find_min_exn&#39;vc.0" expl="exceptional postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="23108"/></proof>
  </goal>
  <goal name="find_min_exn&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="24297"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.merge&#39;vc" expl="VC for merge" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="merge&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="merge&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="23144"/></proof>
   </goal>
   <goal name="merge&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.05" steps="23154"/></proof>
   </goal>
   <goal name="merge&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.05" steps="23162"/></proof>
   </goal>
   <goal name="merge&#39;vc.0.3" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.09" steps="28949"/></proof>
   </goal>
   <goal name="merge&#39;vc.0.4" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="28982"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="merge&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.05" steps="23187"/></proof>
   </goal>
   <goal name="merge&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="23197"/></proof>
   </goal>
   <goal name="merge&#39;vc.1.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.05" steps="23205"/></proof>
   </goal>
   <goal name="merge&#39;vc.1.3" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="26865"/></proof>
   </goal>
   <goal name="merge&#39;vc.1.4" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="26891"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="merge&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="23320"/></proof>
   </goal>
   <goal name="merge&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="23334"/></proof>
   </goal>
   <goal name="merge&#39;vc.2.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.05" steps="23342"/></proof>
   </goal>
   <goal name="merge&#39;vc.2.3" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.09" steps="33441"/></proof>
   </goal>
   <goal name="merge&#39;vc.2.4" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.11" steps="33489"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.add&#39;vc" expl="VC for add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="26406"/></proof>
  </goal>
  <goal name="add&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="23589"/></proof>
  </goal>
  <goal name="add&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="27044"/></proof>
  </goal>
  <goal name="add&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="29503"/></proof>
  </goal>
  <goal name="add&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="30959"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.merge_list&#39;vc" expl="VC for merge_list" proved="true">
 <proof prover="0"><result status="valid" time="0.65" steps="143713"/></proof>
 </goal>
 <goal name="Make.delete_min_exn&#39;vc" expl="VC for delete_min_exn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="delete_min_exn&#39;vc.0" expl="exceptional postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="23108"/></proof>
  </goal>
  <goal name="delete_min_exn&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="24278"/></proof>
  </goal>
  <goal name="delete_min_exn&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="21905"/></proof>
  </goal>
  <goal name="delete_min_exn&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="25061"/></proof>
  </goal>
  <goal name="delete_min_exn&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="25666"/></proof>
  </goal>
  <goal name="delete_min_exn&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="26248"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>

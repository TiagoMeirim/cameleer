module OCamlStdLib

  use export int.Int
  use export mach.int.Int
  use export int.MinMax
  use export list.List
  use export list.Length
  use export list.Append
  (* use export list.Reverse *)
  use export ocaml.Exceptions
  use export option.Option
  use export ref.Ref
  use export ref.Refint

  scope List

    use export list.List
    use export list.Length
    use import list.Append  as A
    use import list.Reverse as R

    let function rev (l: list 'a) : list 'a =
      R.reverse l

    let function append (l1 l2: list 'a) : list 'a =
      A.(++) l1 l2

    goal G: forall l1 l2 l3: list 'a.
      append l1 (append l2 l3) = append (append l1 l2) l3

  end

  scope import Array
    use import array.Array as A

    type array 'a = A.array 'a

    function get (a: array 'a) (i: int) : 'a = a[i]

    val get (a: array 'a) (i: int) : 'a
      requires { 0 <= i < length a }
      ensures  { result = get a i }

    val set (a: array 'a) (i: int) (v: 'a) : unit
      writes   { a }
      requires { 0 <= i < length a }
      ensures  { a.elts = Map.set (old a).elts i v }
      ensures  { a = (old a)[i <- v] }
  end

end